{"version":3,"sources":["components/Schedular.js","index.js"],"names":["Wrapper","styled","div","ScheduleWrapper","H1","h1","Schedular","pull_id","user_id","header","subHeader","startYear","startMonth","startDate","num_days","min_time","max_time","passScheduleOut","lastSelect","useState","schedule","setSchedule","selection","Date","numDays","minTime","maxTime","hourlyChunks","onChange","newSchedule","timeFormat","hoveredColor","postSchedule","document","querySelector","classList","contains","sendData","dates","requestOptions","method","body","JSON","stringify","mode","fetch","then","response","json","data","status","Lobibox","notify","delay","icon","iconSource","showAfterPrevious","msg","width","Math","max","scrollWidth","documentElement","offsetWidth","clientWidth","Swal","fire","title","text","result","confirmButtonText","catch","error","console","log","$","ready","query_url","window","location","href","url","URL","searchParams","get","requestURL","fetchedData","last_select","i","length","vote_name","vote_end","dateString","start_date","split","ReactDOM","render","StrictMode","getElementById","error_message","fetchScheduleParams"],"mappings":"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","file":"static/js/main.df36371f.chunk.js","sourcesContent":["import ScheduleSelector from 'react-schedule-selector';\nimport styled from 'styled-components';\nimport React, { useState } from 'react';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  width: 80%`;\n\nconst ScheduleWrapper = styled.div`\n  padding: 20px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 3px 5px 18px 0px rgba(191,191,191,0.76)`;\n\nconst H1 = styled.h1`\n  font-size: 32pt`;\n\n\nfunction Schedular({ header, subHeader, startYear, startMonth, startDate, num_days, min_time, max_time, passScheduleOut, lastSelect }) {\n  const [schedule, setSchedule] = useState(lastSelect);\n\n  function handleChange(newSchedule) {\n    setSchedule(newSchedule);\n    passScheduleOut(newSchedule);\n  }\n  return (\n    <Wrapper>\n      <header>\n        <H1>{header}</H1>\n        <p>{subHeader}</p>\n      </header>\n      <br />\n      <ScheduleWrapper>\n        <ScheduleSelector\n          selection={schedule}\n          startDate={new Date(startYear, startMonth - 1, startDate)}\n          numDays={num_days}\n          minTime={min_time}\n          maxTime={max_time}\n          hourlyChunks={1}\n          onChange={handleChange}\n          timeFormat={\"hh:mma\"}\n          hoveredColor=\"rgb(219, 237, 255)\"\n        />\n      </ScheduleWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Schedular;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Schedular from './components/Schedular'\nimport Swal from 'sweetalert2'\n\nlet pull_id, user_id;\nlet lastSelect = [];\nlet header = \"React Schedule Selector\";\nlet subHeader = \"Tap to select one time or drag to select multiple times at once.\";\nlet [startYear, startMonth, startDate, num_days, min_time, max_time] = [2021, 3, 8, 4, 4, 14];\n\n$(document).ready(function () {\n    var query_url = window.location.href\n    var url = new URL(query_url);\n\n    pull_id = url.searchParams.get(\"id\")\n    user_id = url.searchParams.get(\"name\")\n\n    fetchScheduleParams();\n})\n\nfunction getWidth() {\n    return Math.max(\n        document.body.scrollWidth,\n        document.documentElement.scrollWidth,\n        document.body.offsetWidth,\n        document.documentElement.offsetWidth,\n        document.documentElement.clientWidth\n    );\n}\n\nfunction fetchScheduleParams() {\n    const requestOptions = {\n        method: 'GET',\n        header: { 'Content-Type': 'application/json' },\n        mode: 'cors'\n    };\n    const requestURL = `/api/vote/get/date?pull_id=${pull_id}&user_id=${user_id}`\n\n    fetch(requestURL, requestOptions)\n        .then(response => response.json())\n        .then((data) => {\n            if (data.status == \"success\") {\n                let fetchedData = data.data;\n                lastSelect = fetchedData.last_select;\n\n                for (let i = 0; i < lastSelect.length; i++) {\n                    lastSelect[i] = new Date(lastSelect[i])\n                }\n\n                header = fetchedData.vote_name;\n                subHeader = `投票截止日期：${fetchedData.vote_end}\\n拖曳或點擊以選擇時間`;\n\n                let dateString = fetchedData.start_date.split('/');\n                startYear = dateString[0];\n                startMonth = dateString[1];\n                startDate = dateString[2];\n\n                num_days = fetchedData.num_days;\n                min_time = fetchedData.min_time;\n                max_time = fetchedData.max_time;\n\n                ReactDOM.render(\n                    <React.StrictMode>\n                        <Schedular\n                            header={header}\n                            subHeader={subHeader}\n                            startYear={startYear}\n                            startMonth={startMonth}\n                            startDate={startDate}\n                            num_days={num_days}\n                            min_time={min_time}\n                            max_time={max_time}\n                            passScheduleOut={postSchedule}\n                            lastSelect={lastSelect}\n                        />\n                    </React.StrictMode>,\n                    document.getElementById('schedular')\n                )\n                console.log(\"done\")\n            } else {\n                Swal.fire({\n                    icon: \"error\",\n                    title: \"很抱歉！\",\n                    text: data.error_message,\n                    confirmButtonText: \"確認\",\n                })\n            }\n        })\n        .catch((error) => {\n            Swal.fire({\n                icon: \"error\",\n                title: \"很抱歉！\",\n                text: \"發生錯誤，請重新再試！\",\n                confirmButtonText: \"確認\",\n            })\n            console.log(error)\n        });\n}\n\nfunction postSchedule(schedule) {\n    let isSelectingSchedule = !document.querySelector(\"#schedular\").classList.contains('hidden');\n    if (isSelectingSchedule) {\n        let sendData = {\n            pull_id,\n            user_id,\n            dates: schedule\n        }\n        const requestOptions = {\n            method: 'POST',\n            header: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(sendData),\n            mode: 'cors'\n        };\n        const requestURL = \"/api/vote/save/date\"\n\n        fetch(requestURL, requestOptions)\n            .then(response => response.json())\n            .then((data) => {\n                if (data.status == \"success\") {\n                    Lobibox.notify(\n                        'success',\n                        {\n                            delay: 1000,\n                            icon: true,\n                            iconSource: \"fontAwesome\",\n                            showAfterPrevious: true,\n                            msg: \"已成功儲存！\",\n                            width: getWidth()\n                        }\n                    );\n                } else {\n                    Swal.fire({\n                        icon: \"error\",\n                        title: \"很抱歉！\",\n                        text: data.result,\n                        confirmButtonText: \"確認\",\n                    })\n                }\n            })\n            .catch((error) => {\n                Swal.fire({\n                    icon: \"error\",\n                    title: \"很抱歉！\",\n                    text: \"發生錯誤，請重新再試！\",\n                    confirmButtonText: \"確認\",\n                })\n                console.log(error)\n            });\n    }\n}\n\n"],"sourceRoot":""}