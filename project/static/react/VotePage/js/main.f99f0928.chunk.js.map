{"version":3,"sources":["components/Schedular.js","index.js"],"names":["Wrapper","styled","div","ScheduleWrapper","H1","h1","Schedular","pull_id","user_id","header","subHeader","startYear","startMonth","startDate","num_days","min_time","max_time","passScheduleOut","lastSelect","useState","schedule","setSchedule","selection","Date","numDays","minTime","maxTime","hourlyChunks","onChange","newSchedule","timeFormat","postSchedule","document","querySelector","classList","contains","sendData","dates","requestOptions","method","body","JSON","stringify","mode","fetch","then","response","json","data","status","Lobibox","notify","delay","icon","iconSource","showAfterPrevious","msg","width","Math","max","scrollWidth","documentElement","offsetWidth","clientWidth","Swal","fire","title","text","result","confirmButtonText","catch","error","console","log","$","ready","query_url","window","location","href","url","URL","searchParams","get","requestURL","fetchedData","last_select","i","length","vote_name","vote_end","dateString","start_date","split","ReactDOM","render","StrictMode","hoveredColor","getElementById","error_message","fetchScheduleParams"],"mappings":"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","file":"static/js/main.f99f0928.chunk.js","sourcesContent":["import ScheduleSelector from 'react-schedule-selector';\nimport styled from 'styled-components';\nimport React, { useState } from 'react';\n\nconst Wrapper = styled.div`\n  text-align: center;\n  margin: 0 auto;\n  width: 80%`;\n\nconst ScheduleWrapper = styled.div`\n  padding: 20px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 3px 5px 18px 0px rgba(191,191,191,0.76)`;\n\nconst H1 = styled.h1`\n  font-size: 32pt`;\n\n\nfunction Schedular({ header, subHeader, startYear, startMonth, startDate, num_days, min_time, max_time, passScheduleOut, lastSelect }) {\n  const [schedule, setSchedule] = useState(lastSelect);\n\n  function handleChange(newSchedule) {\n    setSchedule(newSchedule);\n    passScheduleOut(newSchedule);\n  }\n  return (\n    <Wrapper>\n      <header>\n        <H1>{header}</H1>\n        <p>{subHeader}</p>\n      </header>\n      <br />\n      <ScheduleWrapper>\n        <ScheduleSelector\n          selection={schedule}\n          startDate={new Date(startYear, startMonth - 1, startDate)}\n          numDays={num_days}\n          minTime={min_time}\n          maxTime={max_time}\n          hourlyChunks={1}\n          onChange={handleChange}\n          timeFormat={\"hh:mma\"}\n        />\n      </ScheduleWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Schedular;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Schedular from './components/Schedular'\n\nlet pull_id, user_id;\nlet lastSelect = [];\nlet header = \"React Schedule Selector\";\nlet subHeader = \"Tap to select one time or drag to select multiple times at once.\";\nlet [startYear, startMonth, startDate, num_days, min_time, max_time] = [2021, 3, 8, 4, 4, 14];\n\n$(document).ready(function () {\n  var query_url = window.location.href\n  var url = new URL(query_url);\n\n  pull_id = url.searchParams.get(\"id\")\n  user_id = url.searchParams.get(\"name\")\n\n  fetchScheduleParams();\n})\n\nfunction getWidth() {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth\n  );\n}\n\nfunction fetchScheduleParams() {\n  const requestOptions = {\n    method: 'GET',\n    header: { 'Content-Type': 'application/json' },\n    mode: 'cors'\n  };\n  const requestURL = `/api/vote/get/date?pull_id=${pull_id}&user_id=${user_id}`\n\n  fetch(requestURL, requestOptions)\n    .then(response => response.json())\n    .then((data) => {\n      if (data.status == \"success\") {\n        let fetchedData = data.data;\n        lastSelect = fetchedData.last_select;\n\n        for (let i = 0; i < lastSelect.length; i++) {\n          lastSelect[i] = new Date(lastSelect[i])\n        }\n\n        header = fetchedData.vote_name;\n        subHeader = `投票截止日期：${fetchedData.vote_end}\\n拖曳或點擊以選擇時間`;\n\n        let dateString = fetchedData.start_date.split('/');\n        startYear = dateString[0];\n        startMonth = dateString[1];\n        startDate = dateString[2];\n\n        num_days = fetchedData.num_days;\n        min_time = fetchedData.min_time;\n        max_time = fetchedData.max_time;\n\n        ReactDOM.render(\n          <React.StrictMode>\n            <Schedular\n              header={header}\n              subHeader={subHeader}\n              startYear={startYear}\n              startMonth={startMonth}\n              startDate={startDate}\n              num_days={num_days}\n              min_time={min_time}\n              max_time={max_time}\n              passScheduleOut={postSchedule}\n              lastSelect={lastSelect}\n              hoveredColor=\"rgba(89, 154, 242, 1)\"\n            />\n          </React.StrictMode>,\n          document.getElementById('schedular')\n        )\n\n      } else {\n        Swal.fire({\n          icon: \"error\",\n          title: \"很抱歉！\",\n          text: data.error_message,\n          confirmButtonText: \"確認\",\n        })\n      }\n    })\n    .catch((error) => {\n      Swal.fire({\n        icon: \"error\",\n        title: \"很抱歉！\",\n        text: \"發生錯誤，請重新再試！\",\n        confirmButtonText: \"確認\",\n      })\n      console.log(error)\n    });\n}\n\nfunction postSchedule(schedule) {\n  let isSelectingSchedule = !document.querySelector(\"#schedular\").classList.contains('hidden');\n  if (isSelectingSchedule) {\n    let sendData = {\n      pull_id,\n      user_id,\n      dates: schedule\n    }\n    const requestOptions = {\n      method: 'POST',\n      header: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(sendData),\n      mode: 'cors'\n    };\n    const requestURL = \"/api/vote/save/date\"\n\n    fetch(requestURL, requestOptions)\n      .then(response => response.json())\n      .then((data) => {\n        if (data.status == \"success\") {\n          Lobibox.notify(\n            'success',\n            {\n              delay: 1000,\n              icon: true,\n              iconSource: \"fontAwesome\",\n              showAfterPrevious: true,\n              msg: \"已成功儲存！\",\n              width: getWidth()\n            }\n          );\n        } else {\n          Swal.fire({\n            icon: \"error\",\n            title: \"很抱歉！\",\n            text: data.result,\n            confirmButtonText: \"確認\",\n          })\n        }\n      })\n      .catch((error) => {\n        Swal.fire({\n          icon: \"error\",\n          title: \"很抱歉！\",\n          text: \"發生錯誤，請重新再試！\",\n          confirmButtonText: \"確認\",\n        })\n        console.log(error)\n      });\n  }\n}\n\n"],"sourceRoot":""}